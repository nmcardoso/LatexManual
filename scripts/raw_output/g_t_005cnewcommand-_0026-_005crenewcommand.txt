           \newcommand and \renewcommand define and redefine a command, respectively.  Synopses:     \newcommand{\cmd}[nargs][optargdefault]{defn}   \newcommand*{\cmd}[nargs][optargdefault]{defn} \renewcommand{\cmd}[nargs][optargdefault]{defn} \renewcommand*{\cmd}[nargs][optargdefault]{defn}     The starred form of these two commands requires that the arguments not contain multiple paragraphs of text (not \long, in plain TeX terms).   cmd Required; \cmd is the command name.  For \newcommand, it must not be already defined and must not begin with \end.  For \renewcommand, it must already be defined.   nargs Optional; an integer from 0 to 9, specifying the number of arguments that the command can take, including any optional argument.  If this argument is not present, the default is for the command to have no arguments.  When redefining a command, the new version can have a different number of arguments than the old version.   optargdefault Optional; if this argument is present then the first argument of defined command \cmd is optional, with default value optargdefault (which may be the empty string).  If this argument is not present then \cmd does not take an optional argument.   That is, if \cmd is used with square brackets following, as in \cmd[myval], then within defn the first positional parameter #1 expands myval.  On the other hand, if \cmd is called without square brackets following, then within defn the positional parameter #1 expands to the default optargdefault.  In either case, any required arguments will be referred to starting with #2.  Omitting [myval] in a call is different from having the square brackets with no contents, as in [].  The former results in #1 expanding to optargdefault; the latter results in #1 expanding to the empty string.   defn The text to be substituted for every occurrence of \cmd; the positional parameter #n in defn is replaced by the text of the nth argument.     TeX ignores spaces in the source following an alphabetic control sequence, as in \cmd .  If you actually want a space there, one solution is to type {} after the command (\cmd{} ; another solution is to use an explicit control space (\cmd\ ).  A simple example of defining a new command: \newcommand{\RS}{Robin Smith} results in \RS being replaced by the longer text.  Redefining an existing command is similar: \renewcommand{\qedsymbol}{{\small QED}}.  Heres a command definition with one required argument:   \newcommand{\defref}[1]{Definition~\ref{#1}}   Then, \defref{def:basis} expands to Definition~\ref{def:basis}, which will ultimately expand to something like Definition~3.14.  An example with two required arguments: \newcommand{\nbym}[2]{$#1 \times #2$} is invoked as \nbym{2}{k}.  An example with an optional argument:   \newcommand{\salutation}[1][Sir or Madam]{Dear #1:}   Then, \salutation gives Dear Sir or Madam: while \salutation[John] gives Dear John:.  And \salutation[] gives Dear :.  The braces around defn do not define a group, that is, they do not delimit the scope of the result of expanding defn.  So \newcommand{\shipname}[1]{\it #1} is problematic; in this sentence,   The \shipname{Monitor} met the \shipname{Merrimac}.   the words met the would incorrectly be in italics.  Another pair of braces in the definition is needed, like this: \newcommand{\shipname}[1]{{\it #1}}.  Those braces are part of the definition and thus do define a group.   